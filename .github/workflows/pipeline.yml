permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

name: pipeline

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - '*'

jobs:
  fmt:
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: fmt
      attestations: "git github environment"
      command: go fmt ./...

  vet:
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: vet
      attestations: "git github environment"
      command: go vet ./...

  # --ignore DL3002    
  lint:
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: lint
      pre-command-attestations: "git github environment"
      attestations: "git github environment"
      pre-command: |
        curl -sSfL https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint && \
        chmod +x /usr/local/bin/hadolint
      command: hadolint -f sarif Dockerfile > hadolint.sarif
      artifact-upload-name: hadolint.sarif
      artifact-upload-path: hadolint.sarif

  unit-test:
    needs: [ fmt, vet, lint ]
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: unit-test
      attestations: "git github environment"
      command: go test ./... -coverprofile cover.out
      artifact-upload-name: cover.out
      artifact-upload-path: cover.out

  sast:
    needs: [ fmt, vet, lint ]
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: sast
      pre-command-attestations: "git github environment"
      attestations: "git github environment"
      pre-command: python3 -m pip install semgrep==1.45.0
      command: semgrep scan --config auto ./ --sarif -o semgrep.sarif
      artifact-upload-name: semgrep.sarif
      artifact-upload-path: semgrep.sarif

  build:
    needs: [ unit-test, sast ]
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: build 
      attestations: "git github environment"
      command: go build -o bin/software main.go 
  
  build-image:
    needs: [ unit-test, sast ]
    runs-on: ubuntu-latest

    permissions:
      packages: write
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
  
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: docker/setup-buildx-action@v3.0.0
    
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        tags:
          type=ref,event=tag
        images: ghcr.io/manzil-infinity180/swf/software
        flavor:
          latest=false 

    - name: Docker Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm64
        install: true
        use: true

    - name: Build Image
      uses: testifysec/witness-run-action@reusable-workflow # v0.2.0
      with:
        version: 0.6.0
        step: build-image
        attestations: "git github environment slsa"
        command: |
          /bin/sh -c "docker buildx build --platform linux/arm64 -t ${{ steps.meta.outputs.tags }} --provenance=false --push ."
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

  save-image:
    needs: build-image
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: save-image
      attestations: "git github environment slsa oci"
      command: |
        docker pull ${{ needs.build-image.outputs.tags }} && docker save ${{ needs.build-image.outputs.tags }} -o image.tar
      artifact-upload-name: image.tar
      artifact-upload-path: image.tar

  generate-sbom:
    needs: build-image
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: generate-sbom 
      pre-command-attestations: "git github environment"
      attestations: "git github environment sbom"
      pre-command: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      command: |
        syft packages ${{ needs.build-image.outputs.tags }} --source-name=pkg:oci/jkjell/swf -o cyclonedx-json --file sbom.cdx.json
      artifact-upload-name: sbom.cdx.json
      artifact-upload-path: sbom.cdx.json

  secret-scan:
    needs: build-image
    uses: testifysec/witness-run-action/.github/workflows/witness.yml@reusable-workflow
    with:
      pull_request: ${{ github.event_name == 'pull_request' }}
      step: secret-scan
      pre-command-attestations: "git github environment"
      attestations: "git github environment"
      pre-command: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
      command: |
        trufflehog docker --image=${{ needs.build-image.outputs.tags }} -j > trufflehog.json
      artifact-upload-name: trufflehog.json
      artifact-upload-path: trufflehog.json

#   release:
#     needs: [ build-image ]
#     runs-on: ubuntu-latest

#     steps:
#       - name: Tailscale
#         uses: tailscale/github-action@v3
#         with:
#           oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#           oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#           tags: tag:ci

#       - name: Setup python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.13' 
      
#       - name: Install rstuf-cli
#         run: pip3 install git+https://github.com/kairoaraujo/repository-service-tuf-cli.git@artifacts-verify

#       - name: rstuf artifact add
#         run: |
#           rstuf artifact add ${{ needs.build-image.outputs.tags }} --api-server http://rstuf-rstuf-rstuf-api